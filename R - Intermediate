Content: 
1) Relational and logical operators & IF statements

RELATIONAL OPERATORS

== Equality
!= Inequality
< and > Less than or greater than
=< and >= Less than or equal to, greater than or equal to

We can compare: Logicals, numerics, character strings, logicals with numerics
# Comparison of logicals
TRUE == FALSE
# Comparison of numerics
(-6*14)!=(17-101)
# Comparison of character strings
"user" == "useR"
# Compare a logical with a numeric
TRUE == 1

String comparisons: 
R is case sensitive!!!

All these are TRUE: 
3 == (2 + 1)
"intermediate" != "r"
TRUE != FALSE
"Rchitect" != "rchitect"

!!FALSE is FALSE
!!!FALSE is TRUE

All there are FALSE: 
(1 + 2) > 4
"dog" < "Cats"
TRUE <= FALSE
& and | - mean AND and OR

COMPARING VECTORS

Relational operators also work on vectors:

# The linkedin and facebook vectors have already been created for you
  linkedin <- c(16, 9, 13, 5, 2, 17, 14)
  facebook <- c(17, 7, 5, 16, 8, 13, 14)
# Popular days
  linkedin > 15
# Quiet days
  linkedin <= 5
# LinkedIn more popular than Facebook
  linkedin > facebook

COMPARE MATRICES

Relational operators also work on matrices:

# The social data has been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)

# When does views equal 13?
views == 13

# When is views less than or equal to 14?
views <= 14

AND/OR

There are all TRUE:
TRUE & TRUE
FALSE | TRUE
5 <= 5 & 2 < 3
3 < 4 | 7 < 6

** Watch out: 3 < x < 7 to check if x is between 3 and 7 will not work; you'll need 3 < x & x < 7 for that. **

# The linkedin and last variable are already defined for you
  linkedin <- c(16, 9, 13, 5, 2, 17, 14)
  last <- tail(linkedin, 1)
# Is last under 5 or above 10?
  last < 5 | 10 < last
# Is last between 15 (exclusive) and 20 (inclusive)?
  last <= 20 & last > 15
# The social data (linkedin, facebook, views) has been created for you
# linkedin exceeds 10 but facebook below 10
  linkedin > 10 & facebook < 10
# When were one or both visited at least 12 times?
  linkedin >= 12 | facebook >= 12 
# When is views between 11 (exclusive) and 14 (inclusive)?
  views <= 14 & views > 11

# li_df is pre-loaded in your workspace
  li_df
# Select the second column, named day2, from li_df: second
  second <- li_df$day2
# Build a logical vector, TRUE if value in second is extreme: extremes
  extremes <- (second>25 | second<5)
# Count the number of TRUEs in extremes
  sum(extremes)

__________________________________________________________________________________________________________________________________________________________________

IF STATEMENT
Sytax:

if (condition) {
  expr
}

# Variables related to your last day of recordings
  medium <- "LinkedIn"
  num_views <- 14
  
# Examine the if statement for medium
if (medium == "LinkedIn") {
  print("Showing LinkedIn information")
}

# Write the if statement for num_views
if (num_views > 15) {
  print("You are popular!")
}


IF ELSE

You can only use an else statement in combination with an if statement. 
The else statement does not require a condition; its corresponding code is simply run if all of the preceding conditions in the control structure are FALSE. 

if (condition) {
  expr1
} else {
  expr2
}

**The else keyword comes on the same line as the closing bracket of the if part!**

# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14

# Control structure for medium
if (medium == "LinkedIn") {
  print("Showing LinkedIn information")
} else {
  print("Unknown medium")
}

# Control structure for num_views
if (num_views > 15) {
  print("You're popular!")
} else {
  print("Try to be more visible!")
}


ELSE IF

The else if statement allows you to further customize your control structure. You can add as many else if statements as you like. 
Keep in mind that R ignores the remainder of the control structure once a condition has been found that is TRUE and the corresponding expressions have been executed.

if (condition1) {
  expr1
} else if (condition2) {
  expr2
} else if (condition3) {
  expr3
} else {
  expr4
}

** the else if keywords comes on the same line as the closing bracket of the previous part of the control construct! **

# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14

# Control structure for medium
if (medium == "LinkedIn") {
  print("Showing LinkedIn information")
} else if (medium == "Facebook") {
  print("Showing Facebook information")
  # Add code to print correct string when condition is TRUE
} else {
  print("Unknown medium")
}

# Control structure for num_views
if (num_views > 15) {
  print("You're popular!")
} else if (num_views <= 15 & num_views > 10) {
  print("Your number of views is average")
  # Add code to print correct string when condition is TRUE

} else {
  print("Try to be more visible!")
}

**Because R abandons the control flow as soon as it finds a condition that is met, you can simplify the condition for the else if part in the second construct to num_views > 10.

Nesting inside IF ELSE statements

You can even put in another set of conditional statements. Examine the following code chunk:

if (number < 10) {
  if (number < 5) {
    result <- "extra small"
  } else {
    result <- "small"
  }
} else if (number < 100) {
  result <- "medium"
} else {
  result <- "large"
}
print(result)

Final Challenge: 

# Variables related to your last day of recordings
li <- 15
fb <- 9

# Code the control-flow construct
if (li > 15 & fb > 15) {
  sms <- 2 * (li + fb)
} else if (li < 10 & fb < 10) {
  sms <- 0.5 * (li + fb)
} else {
  sms <- (li + fb)
}

# Print the resulting sms to the console
sms

_____________________________________________________________________________________________________________________________________________________________________________

WHILE LOOPS

Syntax: 

while (condition) {
  expr
}

**the condition part of this recipe should become FALSE at some point during the execution. Otherwise, the while loop will go on indefinitely**

# Initialize the speed variable
speed <- 64

# Code the while loop
while (speed > 30) {
  print ("Slow down!")
  speed <- speed - 7
}

# Print out the speed variable
speed


##Throwing in more conditionals:
# Initialize the speed variable
speed <- 64

# Extend/adapt the while loop
while (speed > 30) {
  print(paste("Your speed is",speed))
  if (speed>48) {
    print("Slow down big time!")
    speed <- speed - 11
  } else {
    print("Slow down!")
    speed <- speed - 6
  }
}

WHILE LOOP BREAK
Control statement

# Initialize the speed variable
speed <- 88

while (speed > 30) {
  print(paste("Your speed is", speed))
  
  # Break the while loop when speed exceeds 80
  if (speed > 80) {
    break
  }
  
  if (speed > 48) {
    print("Slow down big time!")
    speed <- speed - 11
  } else {
    print("Slow down!")
    speed <- speed - 6
  }
}

Exercise:
Finish the while loop so that it:
- prints out the triple of i, so 3 * i, at each run.
- is abandoned with a break if the triple of i is divisible by 8, but still prints out this triple before breaking.

If a number is divisible or not:
To check if the triple of i is divisible by 8, use the condition (i * 3) %% 8 == 0. 
The execution of %% has priority over * so you have to use parentheses to execute the multiplication first.

# Initialize i as 1 
i <- 1

# Code the while loop
while (i <= 10) {
  print(i * 3)
  if ( (i * 3) %% 8 == 0) {
    print (i*3)
    break
  }
  i <- i + 1
}
________________________________________________________________________________________________________________________________________________________________________________

FOR LOOP

primes <- c(2, 3, 5, 7, 11, 13)

# loop version 1
for (p in primes) {
  print(p)
}

# loop version 2
for (i in 1:length(primes)) {
  print(primes[i])
}

