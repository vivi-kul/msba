______________________________________________________________________________________________________________________________________________________
Arithmetic with R

Addition: +
Subtraction: -
Multiplication: *
Division: /
Exponentiation: ^
  The ^ operator raises the number to its left to the power of the number to its right: for example 3^2 is 9.
Modulo: %%
  The modulo returns the remainder of the division of the number to the left by the number on its right, for example 5 modulo 3 or 5 %% 3 is 2.
  
______________________________________________________________________________________________________________________________________________________
Variables
  
  A variable allows you to store a value (e.g. 4) or an object (e.g. a function description) in R. 
  You can then later use this variable's name to easily access the value or the object that is stored within this variable.

# Assign the value 42 to x
    x <- 42
# Print out the value of the variable x
    x

# Assign a value to the variables my_apples and my_oranges
    my_apples <- 5
    my_oranges <- 6
# Add these two variables together
    my_apples + my_oranges
# Create the variable my_fruit
    my_fruit <- my_apples + my_oranges

______________________________________________________________________________________________________________________________________________________

Basic data types in R

R works with numerous data types. Some of the most basic types to get started are:

NUMERICS: Decimal values like 4.5 are called numerics.
INTEGERS: Whole numbers like 4 are called integers. Integers are also numerics.
LOGICAL: Boolean values (TRUE or FALSE) are called logical.
CHARACTERS: Text (or string) values are called characters.
STRINGS: Note how the quotation marks in the editor indicate that "some text" is a string

Functions:
class() to find out data type

______________________________________________________________________________________________________________________________________________________

VECTORS
  Vectors are one-dimension arrays that can hold numeric data, character data, or logical data. In other words, a vector is a simple tool to store data.
  (one dimensional array): can hold numeric, character or logical values. The elements in a vector all have the same data type.
  
  In R, you create a vector with the combine function c(). You place the vector elements separated by a comma between the parentheses. For example:
    numeric_vector <- c(1, 2, 3)
    character_vector <- c("a", "b", "c")
  Once you have created these vectors in R, you can use them to do calculations.

# Poker winnings from Monday to Friday
    poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings from Monday to Friday
    roulette_vector <-  c(-24,-50,100,-350,10)
    
  Naming a vector
  As a data analyst, it is important to have a clear view on the data that you are using. Understanding what each element refers to is therefore essential.
  In the previous exercise, we created a vector with your winnings over the week. 
  Each vector element refers to a day of the week but it is hard to tell which element belongs to which day. It would be nice if you could show that in the vector itself.
  You can give a name to the elements of a vector with the names() function.

some_vector <- c("John Doe", "poker player")
names(some_vector) <- c("Name", "Profession")
This code first creates a vector some_vector and then gives the two elements a name. The first element is assigned the name Name, while the second element is labeled Profession.
          Name     Profession 
    "John Doe" "poker player" 

 You can also create a variable that contains the days of the week. This way you can use and re-use it.
# The variable days_vector
    days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
# Assign the names of the day to roulette_vector and poker_vector
    names(poker_vector) <-  days_vector 
    names(roulette_vector) <- days_vector
______________________________________________________________________________________________________________________________________________________

CALCULATING TOTAL WINNINGS

It is important to know that if you sum two vectors in R, it takes the element-wise sum. For example, the following three statements are completely equivalent:
    c(1, 2, 3) + c(4, 5, 6)
    c(1 + 4, 2 + 5, 3 + 6)
    c(5, 7, 9)

    a <- c(1, 2, 3) 
    b <- c(4, 5, 6)
    c <- a + b
    
  A_vector <- c(1, 2, 3)
  B_vector <- c(4, 5, 6)
# Take the sum of A_vector and B_vector
  total_vector <- A_vector + B_vector
# Print out total_vector
  total_vector
  
  
  First, you need to understand what the overall profit or loss per day of the week was. 
  The total daily profit is the sum of the profit/loss you realized on poker per day, and the profit/loss you realized on roulette per day.
  In R, this is just the sum of roulette_vector and poker_vector.
# Assign to the variable total_daily how much you won or lost on each day in total (poker and roulette combined).

# Poker and roulette winnings from Monday to Friday:
    poker_vector <- c(140, -50, 20, -120, 240)
    roulette_vector <- c(-24, -50, 100, -350, 10)
    days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
    names(poker_vector) <- days_vector
    names(roulette_vector) <- days_vector

# Assign to total_daily how much you won/lost on each day
    total_daily <- poker_vector + roulette_vector

SUM FUNCTION
sum(): It calculates the sum of all elements of a vector. 

# For example, to calculate the total amount of money you have lost/won with poker you do:
    total_poker <- sum(poker_vector)
# Total winnings with roulette
    total_roulette <-  sum(roulette_vector)
# Total winnings overall
    total_week <- total_roulette + total_poker
# Print out total_week
    total_week
# Check if you realized higher total gains in poker than in roulette 
    total_poker>total_roulette    
   
______________________________________________________________________________________________________________________________________________________

VECTOR SELECTION
# Define a new variable based on a selection
    poker_wednesday <- poker_vector[3]
    
To select elements of a vector (and later matrices, data frames, â€¦), you can use square brackets. 
Between the square brackets, you indicate what elements to select. For example, to select the first element of the vector, you type poker_vector[1]. 
*****Notice that the first element in a vector has index 1, not 0 as in many other programming languages*****

# Define a new variable based on a selection
    poker_midweek <- poker_vector[c(2,3,4)]
      c(2, 3, 4) can be abbreviated to 2:4, which generates a vector with all natural numbers from 2 up to 4.
    poker_midweek <- poker_vector[2:4]. 
      Notice how the vector 2:4 is placed between the square brackets to select element 2 up to 4.
# Selects the first and fifth element of poker_vector:
    poker_vector[c(1, 5)]
# Using names
    poker_vector[c("Monday","Tuesday")]
    
# Select poker results for Monday, Tuesday and Wednesday
poker_start <- poker_vector[c("Monday","Tuesday","Wednesday")]

# Calculate the average of the elements in poker_start
mean(poker_start)

COMPARISON

The (logical) comparison operators known to R are:

< for less than
> for greater than
<= for less than or equal to
>= for greater than or equal to
== for equal to each other
!= not equal to each other

You can use these on vectors in R. 

    c(4, 5, 6) > 5
    [1] FALSE FALSE TRUE

# Which days did you make money on poker?
    selection_vector <- poker_vector>0
# Print out selection_vector
    selection_vector
    
Now, you would like to know not only the days on which you won, but also how much you won on those days.
You can select the desired elements, by putting selection_vector between the square brackets that follow poker_vector:
    poker_vector[selection_vector]
R knows what to do when you pass a logical vector in square brackets: it will only select the elements that correspond to TRUE in selection_vector.

# Select from poker_vector these days
    poker_winning_days <- poker_vector[selection_vector]

______________________________________________________________________________________________________________________________________________________

MATRIX
A matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. 
Since you are only working with rows and columns, a matrix is called two-dimensional.
You can construct a matrix in R with the matrix() function.
(two dimensional array): can hold numeric, character or logical values. The elements in a matrix all have the same data type.

  # Construct a matrix with 3 rows that contain the numbers 1 up to 9
    matrix(1:9, byrow = TRUE, nrow=3)
    
      [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6
[3,]    7    8    9

The first argument is the collection of elements that R will arrange into the rows and columns of the matrix. Here, 1:9 is a shortcut for c(1, 2, 3, 4, 5, 6, 7, 8, 9).
The argument byrow indicates that the matrix is filled by the rows. If we want the matrix to be filled by the columns, we just place byrow = FALSE.
The third argument nrow indicates that the matrix should have three rows.

# Box office Star Wars (in millions!)
    new_hope <- c(460.998, 314.4)
    empire_strikes <- c(290.475, 247.900)
    return_jedi <- c(309.306, 165.8)
# Create box_office
    box_office <- c(new_hope, empire_strikes, return_jedi)
# Construct star_wars_matrix
    star_wars_matrix <- matrix(box_office, byrow=TRUE, nrow=3)
# Vectors region and titles, used for naming
    region <- c("US", "non-US")
    titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
# Name the columns with region
    colnames(star_wars_matrix) <- region
# Name the rows with titles
    rownames(star_wars_matrix) <- titles  

# Construct star_wars_matrix
    box_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
    star_wars_matrix <- matrix(box_office, nrow = 3, byrow = TRUE, dimnames = list(c("A New Hope", "The Empire Strikes Back", "Return of the Jedi"), c("US", "non-US")))
# Calculate worldwide box office figures
    worldwide_vector <- rowSums(star_wars_matrix)

ADDING A COLUMN
You can add a column or multiple columns to a matrix with the cbind() function, which merges matrices and/or vectors together by column. For example:
    big_matrix <- cbind(matrix1, matrix2, vector1 ...)
# Bind the new variable worldwide_vector as a column to star_wars_matrix
    all_wars_matrix <- cbind(star_wars_matrix,worldwide_vector)
    
ADDING A ROW
If you want to check out the contents of the workspace, you can type ls() in the console.

# Combine both Star Wars trilogies in one matrix
    all_wars_matrix <- rbind(star_wars_matrix,star_wars_matrix2)
# Total revenue for US and non-US
   total_revenue_vector <- colSums(all_wars_matrix)
# Print out total_revenue_vector
   total_revenue_vector
   
 SELECTION OF MATRIX ELEMENTS
 Similar to vectors, you can use the square brackets [ ] to select one or multiple elements from a matrix. Whereas vectors have one dimension, matrices have two dimensions. 
 You should therefore use a comma to separate the rows you want to select from the columns. 
 
    my_matrix[1,2] selects the element at the first row and second column.
    my_matrix[1:3,2:4] results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.
   
    my_matrix[,1] selects all elements of the first column.
    my_matrix[1,] selects all elements of the first row.
 
# all_wars_matrix is available in your workspace
    all_wars_matrix
# Select the non-US revenue for all movies
    non_us_all <- all_wars_matrix[,2]  
# Average non-US revenue
    mean(non_us_all)
# Select the non-US revenue for first two movies
    non_us_some <- all_wars_matrix[1:2,2] 
# Average non-US revenue for first two movies
    mean(non_us_some)
    
ARITHMETIC WITH MATRICES
  Similar to what you have learned with vectors, the standard operators like +, -, /, *, etc. work in an element-wise way on matrices in R.
  For example, 2 * my_matrix multiplies each element of my_matrix by two.

# Estimate the visitors (Simply dividing the box office numbers by this ticket price gives you the number of visitors.)
  visitors <- all_wars_matrix/5
# Print the estimate to the console
  visitors

Big boss Lucas points out that the ticket prices went up over time. He asks to redo the analysis based on the prices you can find in ticket_prices_matrix
# Estimated number of visitors
    visitors <- all_wars_matrix/ticket_prices_matrix
# US visitors
    us_visitors <- visitors[,1]
# Average number of US visitors
    mean(us_visitors)
    
______________________________________________________________________________________________________________________________________________________

FACTORS
The term factor refers to a statistical data type used to store categorical variables. 
The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. 
A continuous variable, on the other hand, can correspond to an infinite number of values.
It is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently.

# Sex vector
    sex_vector <- c("Male", "Female", "Female", "Male", "Male")
# Convert sex_vector to a factor
    factor_sex_vector <- factor(sex_vector)
# Print out factor_sex_vector
    factor_sex_vector

To create factors in R, you make use of the function factor(). 
First thing that you have to do is create a vector that contains all the observations that belong to a limited number of categories. 
For example, sex_vector contains the sex of 5 different individuals:
    sex_vector <- c("Male","Female","Female","Male","Male")
It is clear that there are two categories, or in R-terms 'factor levels', at work here: "Male" and "Female".
The function factor() will encode the vector as a factor:
    factor_sex_vector <- factor(sex_vector)
    
CATEGORICAL VARIABLES
There are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.

A nominal variable is a categorical variable without an implied order. This means that it is impossible to say that 'one is worth more than the other'. 
In contrast, ordinal variables do have a natural ordering. 
Consider for example the categorical variable temperature_vector with the categories: "Low", "Medium" and "High".

# Animals
    animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
    factor_animals_vector <- factor(animals_vector)
    factor_animals_vector

# Temperature
    temperature_vector <- c("High", "Low", "High","Low", "Medium")
    factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
    factor_temperature_vector

FACTOR LEVELS
When you first get a data set, you will often notice that it contains factors with specific factor levels. 
However, sometimes you will want to change the names of these levels for clarity or other reasons. R allows you to do this with the function levels():
    levels(factor_vector) <- c("name1", "name2",...)

If you don't specify the levels of the factor when creating the vector, R will automatically assign them alphabetically. 
To correctly map "F" to "Female" and "M" to "Male", the levels should be set to c("Female", "Male"), in this order.

# Code to build factor_survey_vector
    survey_vector <- c("M", "F", "F", "M", "M")
    factor_survey_vector <- factor(survey_vector)
# Specify the levels of factor_survey_vector
    levels(factor_survey_vector) <- c("Female","Male")
factor_survey_vector

SUMMARIZING A FACTOR
summary() - This will give you a quick overview of the contents of a variable

  summary(my_var)

# Build factor_survey_vector with clean levels
    survey_vector <- c("M", "F", "F", "M", "M")
    factor_survey_vector <- factor(survey_vector)
    levels(factor_survey_vector) <- c("Female", "Male")
    factor_survey_vector
# Generate summary for survey_vector
    summary(survey_vector)
# Generate summary for factor_survey_vector
    summary(factor_survey_vector)
    The fact that you identified "Male" and "Female" as factor levels in factor_survey_vector enables R to show the number of elements for each category

COMPARISONS

By default, R returns NA when you try to compare values in a factor, since the idea doesn't make sense. 
Ordered factors: more meaningful comparisons are possible

# Create speed_vector
    speed_vector <- c("medium","slow","slow","medium","fast")
# Convert speed_vector to ordered factor vector
    factor_speed_vector <- factor(speed_vector,ordered=TRUE, levels=c("slow","medium","fast"))
# Print factor_speed_vector
    factor_speed_vector
    summary(factor_speed_vector)

By default, the function factor() transforms speed_vector into an unordered factor. 
To create an ordered factor, you have to add two additional arguments: ordered and levels.

    factor(some_vector,
       ordered = TRUE,
       levels = c("lev1", "lev2" ...))
       
By setting the argument ordered to TRUE in the function factor(), you indicate that the factor is ordered. 
With the argument levels you give the values of the factor in the correct order.

# Create factor_speed_vector
    speed_vector <- c("medium", "slow", "slow", "medium", "fast")
    factor_speed_vector <- factor(speed_vector, ordered = TRUE, levels = c("slow", "medium", "fast"))
# Factor value for second data analyst
    da2 <- factor_speed_vector[2]
# Factor value for fifth data analyst
    da5 <- factor_speed_vector[5]
# Is data analyst 2 faster than data analyst 5?
    da2>da5
______________________________________________________________________________________________________________________________________________________

DATA FRAMES

(two-dimensional objects): can hold numeric, character or logical values. 
Within a column all elements have the same data type, but different columns can be of different data type.

A data frame has the variables of a data set as columns and the observations as rows.
Your first task as a data analyst is to develop a clear understanding of its structure and main elements. 
Therefore, it is often useful to show only a small part of the entire data set.

So how to do this in R? Well, the function head() enables you to show the first observations of a data frame. 
Similarly, the function tail() prints out the last observations in your data set.
Both head() and tail() print a top line called the 'header', which contains the names of the different variables in your data set.

# Call head() on mtcars
    head(mtcars)

Another method that is often used to get a rapid overview of your data is the function str(). 
The function str() shows you the structure of your data set. For a data frame it tells you:
  - The total number of observations (e.g. 32 car types)
  - The total number of variables (e.g. 11 car features)
  - A full list of the variables names (e.g. mpg, cyl â€¦ )
  - The data type of each variable (e.g. num)
  - The first observations
Applying the str() function will often be the first thing that you do when receiving a new data set or data frame. 
It is a great way to get more insight in your data set before diving into the real analysis.

# Investigate the structure of mtcars
    str(mtcars)
    
BUILDING A DATA FRAME    
You construct a data frame with the data.frame() function. 
As arguments, you pass the vectors from before: they will become the different columns of your data frame. 
Because every column has the same length, the vectors you pass should also have the same length. 
But don't forget that it is possible (and likely) that they contain different types of data.

# Definition of vectors
    name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
    type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", 
          "Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
    diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
    rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
    rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Create a data frame from the vectors
    planets_df <- data.frame(name,type,diameter,rotation,rings)
    
SELECTING ELEMENTS
Similar to vectors and matrices, you select elements from a data frame with the help of square brackets [ ]. 
By using a comma, you can indicate what to select from the rows and the columns respectively. For example:
    my_df[1,2] selects the value at the first row and second column in my_df.
    my_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 in my_df.
Sometimes you want to select all elements of a row or column. For example, my_df[1, ] selects all elements of the first row.

# Print out diameter of Mercury (row 1, column 3)
    planets_df[1,3]
# Print out data for Mars (entire fourth row)
    planets_df[4,]
# Select first 5 values of diameter column
    planets_df[1:5,"diameter"]

If you want to select all elements of the variable diameter, for example, both of these will do the trick:
    planets_df[,3]
    planets_df[,"diameter"]
However, there is a short-cut. If your columns have names, you can use the $ sign:
    planets_df$diameter
    
# Select the rings variable from planets_df
    rings_vector <- planets_df$rings  
# Print out rings_vector
    rings_vector
# Adapt the code to select all columns for planets with rings - You can do the same with the subset function
    planets_df[rings_vector,]
# Select planets with diameter < 1
    subset(planets_df,subset=diameter<1)
    
    subset(my_df, subset = some_condition)
The first argument of subset() specifies the data set for which you want a subset. 
By adding the second argument, you give R the necessary information and conditions to select the correct subset.

SORTING

order() is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:

a <- c(100, 10, 1000)
order(a)
[1] 2 1 3

10, which is the second element in a, is the smallest element, so 2 comes first in the output of order(a). 
100, which is the first element in a is the second smallest element, so 1 comes second in the output of order(a).

This means we can use the output of order(a) to reshuffle a:
a[order(a)]
[1]   10  100 1000

# Use order() to create positions
    positions <-  order(planets_df$diameter)
# Use positions to sort planets_df
    planets_df[positions,]
______________________________________________________________________________________________________________________________________________________

LISTS
A list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. 
These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way.
You could say that a list is some kind super data type: you can store practically any piece of information in it!

list():
    my_list <- list(comp1, comp2 ...)
  
# Vector with numerics from 1 up to 10
    my_vector <- 1:10 
# Matrix with numerics from 1 up to 9
    my_matrix <- matrix(1:9, ncol = 3)
# First 10 elements of the built-in data frame mtcars
    my_df <- mtcars[1:10,]
# Adapt list() call to give the components names
    my_list <- list(vec = my_vector, mat = my_matrix, df = my_df)
# Print out my_list
    my_list

You should give names to the components:

my_list <- list(name1 = your_comp1, 
                name2 = your_comp2)
                
If you want to name your lists after you've created them, you can use the names() function as you did with vectors. 
The following commands are fully equivalent to the assignment above:

my_list <- list(your_comp1, your_comp2)
names(my_list) <- c("name1", "name2")


# Finish the code to build shining_list
shining_list <- list(moviename = mov, actors=act, reviews=rev)

HOW TO SELECT FROM LISTS [[]]

One way to select a component is using the numbered position of that component. For example, to "grab" the first component of shining_list you type
    shining_list[[1]]
A quick way to check this out is typing it in the console. Important to remember: to select elements from vectors, you use single square brackets: [ ]. Don't mix them up!
You can also refer to the names of the components, with [[ ]] or with the $ sign. Both will select the data frame representing the reviews:
    shining_list[["reviews"]]
    shining_list$reviews
    
Besides selecting components, you often need to select specific elements out of these components. 
For example, with shining_list[[2]][1] you select from the second component, actors (shining_list[[2]]), the first element ([1]). 

# Print out the vector representing the actors
    shining_list[["actors"]]
# Print the second element of the vector representing the actors
    shining_list[["actors"]][2]
    
# Use the table from the exercise to define the comments and scores vectors
    scores <- c(4.6, 5, 4.8, 5, 4.2)
    comments <- c("I would watch it again", "Amazing!", "I liked it", "One of the best movies", "Fascinating plot")
# Save the average of the scores vector as avg_review  
    avg_review <- mean(scores)
# Combine scores and comments into the reviews_df data frame
    reviews_df <- data.frame(scores,comments)
# Create and print out a list, called departed_list
    departed_list <- list(movie_title,movie_actors,reviews_df,avg_review)
    departed_list
    
    
