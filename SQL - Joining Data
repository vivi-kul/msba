Types of Joins
Inner Joins: Self-Join
Outer Joins: Left, Right, Full
Cross Joins
Semi-Joins/Anti-Joins

Self-, semi-, and anti-joins don't have self-built-in syntax

Note: Multi line comments with /* and */
Basic syntax for an INNER JOIN, including all columns in both tables:

SELECT *
FROM left_table
INNER JOIN right_table
ON left_table.id = right_table.id;

-- Ex: Select name fields (with alias) and region 
SELECT cities.name as city, countries.name as country, region
FROM cities
  INNER JOIN countries
    ON cities.country_code = countries.code;
    
Aliasing

SELECT c1.name AS city, c2.name AS country
FROM cities AS c1
INNER JOIN countries AS c2
ON c1.country_code = c2.code;

-- Ex:
SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
  -- 1. From countries (alias as c)
  FROM countries AS c
  -- 2. Join to populations (as p)
  INNER JOIN populations AS p
    -- 3. Match on country code
    ON c.code = p.country_code
  -- 4. Join to economies (as e)
  INNER JOIN economies AS e
    -- 5. Match on country code and year
    on c.code=e.code AND p.year=e.year;
    
USING
Inner join with using
...When joining tables with a common field name, e.g.

INNER JOINS


SELECT *
FROM countries
  INNER JOIN economies
    ON countries.code = economies.code
You can use USING as a shortcut:

SELECT *
FROM countries
  INNER JOIN economies
    USING(code)

SELECT c.name as country, c.continent, l.name as language, l.official
  -- 1. From countries (alias as c)
  FROM countries as c
  -- 2. Join to languages (as l)
  INNER JOIN languages as l
    -- 3. Match using code
    USING(code)

SELF-JOIN

SELECT p1.country_code,
       p1.size AS size2010, 
       p2.size AS size2015,
       -- 1. calculate growth_perc
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
-- 2. From populations (alias as p1)
FROM populations AS p1
  -- 3. Join to itself (alias as p2)
  INNER JOIN populations AS p2
    -- 4. Match on country code
    ON p1.country_code = p2.country_code
        -- 5. and year (with calculation)
        AND p1.year = p2.year - 5;
        
Another example: List two countries on same continent

SELECT p1.country AS country1, p2.country AS country2, p1.continent
FROM prime_ministers AS p1
INNER JOIN prime_ministers AS p2
ON p1.continent = p2.continent AND p1.country <> p2.country
LIMIT 13;
        
CASE WHEN AND THEN ELSE END

Often it's useful to look at a numerical field not as raw data, but instead as being in different categories or groups.
You can use CASE with WHEN, THEN, ELSE, and END to define a new grouping field.

SELECT name, continent, code, surface_area,
    -- 1. First case
    CASE WHEN surface_area > 2000000 THEN 'large'
        -- 2. Second case
        WHEN surface_area > 350000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name
        AS geosize_group
-- 5. From table
FROM countries;

INTO

SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;

Select name, continent, geosize_group, popsize_group
-- 1. From countries_plus (alias as c)
from countries_plus as c
  -- 2. Join to pop_plus (alias as p)
  join pop_plus as p
    -- 3. Match on country code
    On c.code = p.country_code
-- 4. Order the table    
order by geosize_group asc;

Another example:

SELECT name, continent, indep_year, 
  CASE WHEN indep_year < 1900 THEN 'before 1900'
       WHEN indep_year <= 1930 THEN 'between 1900 and 1930'
       ELSE 'after 1930' END
       AS indep_year_group
FROM states
ORDER BY indep_year_group

Another example:

SELECT p1.country_code,
       p1.size AS size2010, 
       p2.size AS size2015,
-- 1. calculate growth_perc
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
-- 2. From populations (alias as p1)
FROM populations AS p1
-- 3. Join to itself (alias as p2)
  INNER JOIN populations AS p2
-- 4. Match on country code
    ON p1.country_code = p2.country_code
-- 5. and year (with calculation)
    AND p1.year = p2.year - 5;

Another example:

SELECT name, continent, code, surface_area,
    -- 1. First case
    CASE WHEN surface_area > 2000000 THEN 'large'
        -- 2. Second case
        WHEN surface_area > 350000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name
        AS geosize_group
-- 5. From table
FROM countries;
_______________________________________________________________________________________________________________________________________________________

RIGHT, LEFT, FULL OUTER JOIN

Select c.name AS country, local_name, l.name AS language, percent
-- 1. From left table (alias as c)
FROM countries AS c
  -- 2. Join to right table (alias as l)
  Left JOIN languages AS l
    -- 3. Match on fields
    ON c.code = l.code
-- 4. Order by descending country
ORDER BY country DESC;

Another example:

-- Select fields
SELECT region, AVG(gdp_percapita) AS avg_gdp
-- From countries (alias as c)
from countries as c
  -- Left join with economies (alias as e)
  left join economies as e
    -- Match on code fields
    on c.code = e.code
-- Focus on 2010
where year = 2010
-- Group by region
group by region
-- Order by descending avg_gdp
order by avg_gdp desc;

FULL JOIN

SELECT name AS country, code, region, basic_unit
-- 3. From countries
FROM countries
  -- 4. Join to currencies
  FULL JOIN currencies
    -- 5. Match on code
    USING (code)
-- 1. Where region is North America or null
WHERE region = 'North America' OR region IS NULL
-- 2. Order by region
ORDER BY region;

**Interesting where statement**
-- 1. Where countries.name starts with V or is null
WHERE countries.name LIKE 'V%' OR countries.name IS NULL

-- 7. Select fields (with aliases)
SELECT c1.name AS country, c1.region, l.name AS language,
       c2.basic_unit, c2.frac_unit
-- 1. From countries (alias as c1)
FROM countries AS c1
  -- 2. Join with languages (alias as l)
  FULL JOIN languages AS l
    -- 3. Match on code
    USING (code)
  -- 4. Join with currencies (alias as c2)
  FULL JOIN currencies AS c2
    -- 5. Match on code
    USING (code)
-- 6. Where region like Melanesia and Micronesia
WHERE region LIKE 'M%esia';

_____________________________________________________________________________________

Join for all combinations between table A and B
Same syntax as earlier in the course "CROSS JOIN"

Select table1.id AS id1, 
	table2.id AS id2
From table1
Cross Join table2;

-- 4. Select fields
SELECT c.name AS city, l.name AS language
-- 1. From cities (alias as c)
FROM cities AS c        
  -- 2. Join to languages (alias as l)
  CROSS JOIN languages AS l
-- 3. Where c.name like Hyderabad
WHERE c.name LIKE 'Hyder%';


__________________________________________________________________________

UNION 

4 Theory Clauses:
(UNION (every record in both tables but no double count) 
UNION ALL - can duplicate
INTERSECT - records only in both tableas
EXCEPT - records in one table but not another

Select name
From name
UNION/UNION ALL
Select name
From name

**When Union looks as two columns, it includes both columns in the search
**It looks for individual key fields in common, not line records

Example: 
-- Select fields from 2010 table
select *
  -- From 2010 table
  from economies2010
	-- Set theory clause
	union 
-- Select fields from 2015 table
select *
  -- From 2015 table
  from economies2015
-- Order by code and year
order by code, year;

INTERSECT

Select name
From name
INTERSECT
Select name
From name

**When intersect looks as two columns, it includes both columns in the search
**It looks for records in common, not individual key fields.

Question: which countries also have a city with the same name as their country name?
-- Select fields
select name
  -- From countries
  from countries
	-- set theory clause
	intersect
-- Select fields
select name
  -- From cities
  from cities;
  
EXCEPT 

Select name
From name
EXCEPT
Select name
From name

**Looks at records, not individual fields

Example Question: Get the names of cities in cities which are not noted as capital cities in countries as a single field result.

-- Select field
SELECT name
  -- From cities
  FROM cities
	-- Set theory clause
	except
-- Select field
SELECT capital
  -- From countries
  FROM countries
-- Order by result
ORDER BY name asc;

Inner JOin
Self Join
Left Join
Right Join
Full Join 
Cross Join
--- those are all additive
________________________________________________________________________________________________________________________________

SEMI-JOINS and ANTI-JOINS
Intro to subqery

SEMI JOIN Choses records in first table where a condition is met in the second table
ANTI JOIN Choses records in first table where a condition is not met in the second table
  Anti-join: useful in identifying which records are causing an incorrect number of records to appear in join queries.

SEMI JOIN:

SELECT president, country, continent
FROM presidents
WHERE country IN 
  (Select name
   From states
   Where indep_year < 1800);
   
ANTI JOIN: 

SELECT president, country, continent
FROM presidents
WHERE continent LIKE '%America'
  AND country NOT IN 
  (Select name
   From states
   Where indep_year < 1800);

Question: Retrieve languages spoken in the Middle East.
Select Distinct name
  From languages
WHERE code IN
  (Select code
   From countries
   Where region='Middle East')
order by name;

**Can also be solved using an INNER JOIN with Distinct

Question: Identify the currencies used in Oceanian countries


Challenge: Identify the country codes that are included in either economies or currencies but not in populations.

-- Select the city name
Select c1.name
  -- Alias the table where city name resides
  From cities AS c1
  -- Choose only records matching the result of multiple set theory clauses
  WHERE c1.country_code IN
(
    -- Select appropriate field from economies AS e
    SELECT e.code
    FROM economies AS e
    -- Get all additional (unique) values of the field from currencies AS c2  
    UNION
    SELECT c2.code
    FROM currencies AS c2
    -- Exclude those appearing in populations AS p
    EXCEPT
    SELECT p.country_code
    FROM populations AS p
);

___________________________________________________________________________________________________________________________________________

SUBQUERIES

Most common: Inside WHERE clause
2nd most common: Inside SELECT clause
    *Need to give subquery an ALIAS in Select clause
3rd: Inside FROM clause

Example: WHERE clause

SELECT name, fert_rate
FROM states
WHERE continent = 'Asia'
    AND fert_rate <
  (SELECT AVG(fert_rate) 
    FROM states)
    
Example: SELECT clause

SELECT DISTINCT 
      continent,
     (SELECT COUNT(*)
     FROM states
     WHERE prime_ministers.continent = states.continent) AS countries_num
FROM prime_ministers

Suppose we wanted only records that were above 1.15 * 100 in terms of life expectancy for 2015:

SELECT *
  FROM populations
WHERE life_expectancy > 1.15 * 100
  AND year = 2015;
  
Nested: 

-- Select fields
Select *
  -- From populations
  From populations
-- Where life_expectancy is greater than
WHERE life_expectancy > 1.15 * (SELECT AVG(life_expectancy) FROM populations WHERE year = 2015)
  AND year = 2015;
 
 SUBQUERY INSIDE FROM CLAUSE
 Include Subquery as Temporary Table in FROM clause:
 
 SELECT DISTINCT monarchs.continent, subquery.max_perc
 FROM monarchs,
 	(SELECT continent, MAX(women_parli_perc) AS max_perc
	FROM states
	GROUP BY continent) AS subquery
 WHERE monarchs.continent = subquery.continent
 ORDER BY continent; 

 Another example: 
 
 -- Select fields
SELECT local_name, lang_num
  -- From countries
  FROM countries,
  	-- Subquery (alias as subquery)
  	(SELECT code, COUNT(name) as lang_num
  	 FROM languages
  	 GROUP BY code) AS subquery
  -- Where codes match
  WHERE countries.code = subquery.code
-- Order by descending number of languages
ORDER BY lang_num desc;
  
_____________________________________________________________________________________________________________________

Challenge 1:

-- Select fields
SELECT DISTINCT c.name, e.total_investment, e.imports
  -- From table (with alias)
  FROM countries AS c
    -- Join with table (with alias)
    LEFT JOIN economies AS e
      -- Match on code
      ON (c.code = e.code
      -- and code in Subquery
        AND c.code IN (
          SELECT l.code
          FROM languages AS l
          WHERE official = 'true'
        ) )
  -- Where region and year are correct
  WHERE c.region = 'Central America' AND e.year = 2015
-- Order by field
ORDER BY name asc;

Challenge 2: 

-- Select fields
SELECT c.region, c.continent, AVG(p.fertility_rate) AS avg_fert_rate
  -- From left table
  FROM countries AS c
    -- Join to right table
    INNER JOIN populations AS p
      -- Match on join condition
      ON c.code = p.country_code
  -- Where specific records matching some condition
  WHERE p.year= 2015
-- Group appropriately
GROUP BY c.region, c.continent
-- Order appropriately
ORDER BY avg_fert_rate asc;

Challenge 3:

-- Select fields
SELECT name, country_code, city_proper_pop, metroarea_pop,  
      -- Calculate city_perc
      city_proper_pop / metroarea_pop * 100 AS city_perc
  -- From appropriate table
  FROM cities
  -- Where 
  WHERE name IN
    -- Subquery
    (SELECT capital
     FROM countries
     WHERE (continent = 'Europe'
        OR continent LIKE '%America'))
       AND metroarea_pop IS NOT NULL
-- Order appropriately
ORDER BY city_perc desc
-- Limit amount
LIMIT 10;

