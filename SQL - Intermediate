1) CASE WHEN
2) Subqueries,(simple, correlated)
3) Window functions

___________________________________________________________________________________________________________________________________
** Course: Shape, transform, and manipulate data
** Already familiar with Selecting, filtering, and grouping data, as well as using joins. 
** Now build upon topics to interact better with databases

CASE WHEN
-- In SELECT statement
-- Compare separate outcomes in a single datatable
-- WHEN THEN ELSE finished with END
-- Consider what is in your ELSE clause (everything else)
-- Completed case statement is one column in the query

CASE WHEN c = 1 THEN  'a'
      WHEN c = 2 THEN 'b'
       ELSE 'c' END AS alias,
       
-- can also use >= or <= 
       
-- Simple example

SELECT *
FROM table
WHERE 
    CASE WHEN a > 5 THEN 'Keep'
         WHEN a <= 5 THEN 'Exclude' END = 'Keep';

SELECT 
	CASE WHEN hometeam_id = 10189 THEN 'FC Schalke 04'
       WHEN hometeam_id = 9823 THEN 'FC Bayern Munich'
       ELSE 'Other' END AS home_team,
	COUNT(id) AS total_matches
FROM matches_germany
GROUP BY home_team;

-- In this query we are avoiding a join and can identify two soccer teams simultaneously using CASE WHEN

SELECT date,
	CASE WHEN home_goal > away_goal THEN 'Home win!'
        WHEN home_goal < away_goal THEN 'Home loss :(' 
        ELSE 'Tie' END AS outcome
FROM matches_spain;

-- Simple example fo case when using strings

SELECT 
	m.date,
	t.team_long_name AS opponent, 
	CASE WHEN m.home_goal > m.away_goal THEN 'Home win!'
        WHEN m.home_goal < m.away_goal THEN 'Home loss :('
        ELSE 'Tie' END AS outcome
FROM matches_spain AS m
LEFT JOIN teams_spain AS t
ON m.awayteam_id = t.team_api_id;

-- Case when and left join

SELECT 
	m.date,
	t.team_long_name AS opponent,
	CASE WHEN m.home_goal > m.away_goal THEN 'Barcelona win!'
        WHEN m.home_goal < m.away_goal THEN 'Barcelona loss :(' 
        ELSE 'Tie' END AS outcome 
FROM matches_spain AS m
LEFT JOIN teams_spain AS t 
	ON m.awayteam_id = t.team_api_id
WHERE m.hometeam_id = 8634; 

-- Barcelona at home

-- Select matches where Barcelona was the away team
SELECT  
	m.date,
	t.team_long_name AS opponent,
	CASE WHEN m.home_goal < m.away_goal  THEN 'Barcelona win!'
        WHEN m.home_goal > m.away_goal THEN 'Barcelona loss :(' 
        ELSE 'Tie' END AS outcome
FROM matches_spain AS m
-- Join teams_spain to matches_spain
LEFT JOIN teams_spain AS t 
ON m.hometeam_id = t.team_api_id
WHERE m.awayteam_id = 8634;

-- Barcelona away

SELECT 
	date,
-- Identify the home team as Barcelona or Real Madrid
	CASE WHEN hometeam_id = 8634 THEN 'FC Barcelona' 
        ELSE 'Real Madrid CF' END AS home,
-- Identify the away team as Barcelona or Real Madrid
	CASE WHEN awayteam_id = 8634 THEN 'FC Barcelona' 
        ELSE 'Real Madrid CF' END AS away
FROM matches_spain
WHERE (awayteam_id = 8634 OR hometeam_id = 8634)
      AND (awayteam_id = 8633 OR hometeam_id = 8633);

--The where clause ensures we only look at Barca and Real Madrid games.

-- Minimizing the amount of whens used

-- Using CASE WHEN with AND: To test multiple logical conditions place AND in where clause

SELECT 
	date,
	CASE WHEN hometeam_id = 8634 THEN 'FC Barcelona' ELSE 'Real Madrid CF' END as home,
	CASE WHEN awayteam_id = 8634 THEN 'FC Barcelona' ELSE 'Real Madrid CF' END as away,
-- Identify all possible match outcomes
	CASE WHEN home_goal > away_goal AND hometeam_id = 8634 THEN 'Barcelona win!'
        WHEN home_goal > away_goal AND hometeam_id = 8633 THEN 'Real Madrid win!'
        WHEN home_goal < away_goal AND awayteam_id = 8634 THEN 'Barcelona win!'
        WHEN home_goal < away_goal AND awayteam_id = 8633 THEN 'Real Madrid win!'
        ELSE 'Tie!' END AS outcome
FROM matches_spain
WHERE (awayteam_id = 8634 OR hometeam_id = 8634)
      AND (awayteam_id = 8633 OR hometeam_id = 8633);

-- Using CASE WHEN in the WHERE clause

-- Select the season, date, home_goal, and away_goal columns
SELECT 
	season,
    	date,
	home_goal,
	away_goal
FROM matches_italy
WHERE 
-- Exclude games not won by Bologna
	CASE WHEN hometeam_id = 9857 AND home_goal > away_goal THEN 'Bologna Win'
	     WHEN awayteam_id = 9857 AND away_goal > home_goal THEN 'Bologna Win' 
	     END IS NOT NULL;

-- This query uses the CASE statement in the WHERE clause to filter all NULL values generated by the statement in the previous step.
--Table only includes home or away wins, dont need to filter by id in where clause, bc it is included in the case

-- USING CASE WHEN AND COUNT
-- Wrap the CASE statement in a COUNT function and group the query by the country alias.

SELECT 
	c.name AS country,
-- Count games from the 2012/2013 season
	COUNT(CASE WHEN m.season = '2012/2013' 
          	   THEN m.id ELSE NULL END) AS matches_2012_2013
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id
-- Group by country name alias
GROUP BY country;

-- A more complicated example
-- CASE statements with aggregate functions

SELECT 
	c.name AS country,
 -- Count matches in each of the 3 seasons
	COUNT(CASE WHEN m.season = '2012/2013' THEN m.id ELSE NULL END) AS matches_2012_2013,
	COUNT(CASE WHEN m.season = '2013/2014' THEN m.id ELSE NULL END) AS matches_2013_2014,
	COUNT(CASE WHEN m.season = '2014/2015' THEN m.id ELSE NULL END) AS matches_2014_2015
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id
-- Group by country name alias
Group by country;


-- Using SUM

SELECT 
	c.name AS country,
-- Sum the total records in each season where the home team won
	SUM(CASE WHEN m.season = '2012/2013' AND m.home_goal > m.away_goal 
        THEN 1 ELSE 0 END) AS matches_2012_2013,
 	SUM(CASE WHEN m.season = '2013/2014' AND m.home_goal > m.away_goal 
        THEN 1 ELSE 0 END) AS matches_2013_2014,
	SUM(CASE WHEN m.season = '2014/2015'  AND m.home_goal > m.away_goal 
        THEN 1 ELSE 0 END) AS matches_2014_2015
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id
-- Group by country name alias
GROUP BY country;


-- Simple one:

SELECT 
    c.name AS country,
    -- Count the home wins, away wins, and ties in each country
	COUNT(CASE WHEN m.home_goal > m.away_goal THEN m.id END) AS home_wins,
	COUNT(CASE WHEN m.home_goal < m.away_goal THEN m.id END) AS away_wins,
	COUNT(CASE WHEN m.home_goal = m.away_goal THEN m.id END) AS ties
FROM country AS c
LEFT JOIN matches AS m
ON c.id = m.country_id
GROUP BY country;

-- Using CASE WHEN and AVG
-- Can be used to calculate AVG of data
-- can round be using ROUND(value, decimals)
-- Use AVG for percentages: use 1 and 0s in case when

SELECT 
	c.name AS country,
-- Calculate the percentage of tied games in each season
	AVG(CASE WHEN m.season='2013/2014' AND m.home_goal = m.away_goal THEN 1
		 WHEN m.season='2013/2014' AND m.home_goal != m.away_goal THEN 0
		 END) AS ties_2013_2014,
	AVG(CASE WHEN m.season='2014/2015' AND m.home_goal = m.away_goal THEN 1
		 WHEN m.season='2014/2015' AND m.home_goal != m.away_goal THEN 0
		 END) AS ties_2014_2015
FROM country AS c
LEFT JOIN matches AS m
ON c.id = m.country_id
GROUP BY country;

-- Add-on: 
-- Round the percentage of tied games to 2 decimal points
	ROUND(AVG(CASE WHEN m.season='2013/2014' AND m.home_goal = m.away_goal THEN 1
			 WHEN m.season='2013/2014' AND m.home_goal != m.away_goal THEN 0
			 END),2) AS pct_ties_2013_2014,
	ROUND(AVG(CASE WHEN m.season='2014/2015' AND m.home_goal = m.away_goal THEN 1
			 WHEN m.season='2014/2015' AND m.home_goal != m.away_goal THEN 0
			 END),2) AS pct_ties_2014_2015

____________________________________________________________________________________________________________________________________

SUBQUERIES
-- Can be placed in any part of the query
-- Can be used for: Scalar quantities, a list, a table. 
-- Compare groups to summarized values
-- Reshape data
-- Combining data that cannot be joined 

-- Simple subquery: Can be evaluated idependently from the outer query, evaluated 1x/entire statement

--Subquery in SELECT

SELECT 3 * AVG(home_goal + away_goal)
FROM matches_2013_2014;

-- Subquery in WHERE
-- Can only return a single column

Which matches in 2012/2013 season scored home goals higher than overall average?

SELECT date, hometeam_id, awayteam_id, home_goal, away_goal
FROM match
WHERE season = '2012/2012'
	AND home_goal > (SELECT AVG(home_goal) FROM match);

Exercise:
Generate a list of matches where the total goals scored (for both teams in total) 
is more than 3 times the average for games in the matches_2013_2014 table, 
which includes all games played in the 2013/2014 season.

SELECT 
	-- Select the date, home goals, and away goals scored
    date,
	home_goal,
	away_goal
FROM  matches_2013_2014
-- Filter for matches where total goals exceeds 3x the average
WHERE (home_goal + away_goal) > 
       (SELECT 3 * AVG(home_goal + away_goal)
        FROM matches_2013_2014); 

-- Subqueries in FROM
-- Restructuring and transforming data
-- Prefiltering the data
-- Calculate aggregates of aggregates
-- Can have multiple subqueries in one FROM statement (Alias and Join them)
-- You can join a subquery to a table in FROM (column in subquery that is used in join)


Which team has the highest average of homegoals scored?

SELECT team, home_avg
FROM (
	SELECT 
		t.team_long_name as team, 
		AVG(.home_goal) AS home_avg
	FROM match AS m
	LEFT JOIN team AS t
	ON m.hometeam_id = t.team_api_id
	WHERE season='2011/2012'
	GROUP BY team
	) AS subquery
ORDER BY home_avg DESC
LIMIT 3;


-- Correlated Subqueries
-- Uses values from the outer query to generate a result
-- Re-run for every row generated in the final dataset
-- Used for advanced joining, filtering, and evaluating of data within DB
-- Dependent on values in main query
-- Evaluated in loops, once for each row generated by the dataset
-- Significantly slows down query runtime

What is the average number of goals scored in each country across all match seasons?

-- Simple
SELECT c.name AS country,
	AVG(m.home_goal+m.away_goal) AS avg_goals
FROM country AS c
LEFT JOIN match AS m 
	ON c.id = m.country_id
GROUP BY country;

-- Correlated
SELECT c.name AS country, 
	(SELECT AVG(home_goal + away_goal) 
	FROM match AS m
	WHERE m.country_id = c.id) as avg_goals -- Where clause matches ids and replaces entire join
FROM country as c
GROUP BY country;

-- Nested Subqueries
-- Subquery inside another subquery
-- Perform multiple layers of transformation
-- Can be correlated or uncorrelated, or a combination of the two
-- Can reference information from the outer or main query

SELECT
	EXTRACT(MONTH FROM date) AS month,
	SUM(m.home_goal + m.away_goal) AS total_goals,
	SUM(m.home_goal + m.away_goal) -
		(SELECT AVG(goals)
		FROM 	(SELECT
				EXTRACT(MONTH FROM date) AS month, 
				SUM(home_goal + away_goal) AS goals
			FROM match
			GROUP BY month
			) AS s) AS diff
FROM match as m
GROUP by month;


What is each country's average goals scored in the 2011/2012 season?

SELECT 
	c.name AS county, 
	(SELECT AVG(home_goal + away_goal)
	FROM match AS m
	WHERE m.country_id = c.id -- Correlated with main query
		AND id IN (
			SELECT id -- Begin inner query
			FROM match
			WHERE season = '2011/2012')) AS avg_goals
FROM country AS c
GROUP BY country;

What is the average number of matches per season where a team scored 5 or more goals?
How does this differ by country?

SELECT
	c.name AS country,
    -- Calculate the average matches per season
	AVG(outer_s.matches) AS avg_seasonal_high_scores
FROM country AS c
-- Left join outer_s to country
LEFT JOIN (
  SELECT country_id, season,
         COUNT(id) AS matches
  FROM (
    SELECT country_id, season, id
	FROM match
	WHERE home_goal >= 5 OR away_goal >= 5) AS inner_s
  -- Close parentheses and alias the subquery
  GROUP BY country_id, season) AS outer_s
ON c.id = outer_s.country_id
GROUP BY country;

-- Common Table Expressions
-- Only executed once, then stored in memory
-- Improves query performance
-- Improving organization of queries
-- Referencing other CTEs
-- Reference itself (SELF JOIN) in a recursive CTE

WITH cte AS (
	SELECT col1, col2
	FROM table)
SELECT AVG(col1) as avg_col
FROM cte;

Example:

WITH s1 AS (
	SELECT country_id, id
	FROM match
	WHERE (home_goal + away_goal) >= 10
	),
     s2 AS (
     	SELECT country_id, id
	FROM match
	WHERE (home_goal + away_goal) <= 1
	)
SELECT 
	c.name AS country,
	COUNT(s1.id) AS high_scores,
	COUNT(s2.id) AS low_scores
FROM country AS c
INNER JOIN s1
ON c.id = s1.country_id
GROUP BY country;
INNER JOIN s2
ON c.id = s2.country_id
GROUP BY country;

___

Another example:

-- Set up your CTE
WITH match_list AS (
    SELECT 
  		country_id, 
  		id
    FROM match
    WHERE (home_goal + away_goal) >= 10)
-- Select league and count of matches from the CTE
SELECT
    l.name AS league,
    COUNT(match_list.id) AS matches
FROM league AS l
-- Join the CTE to the league table
LEFT JOIN match_list ON l.id = match_list.country_id
GROUP BY l.name;

-- You can join tables inside a CTE

-- Set up your CTE
WITH match_list AS (
  -- Select the league, date, home, and away goals
    SELECT 
  	l.name AS league, 
     	m.date, 
  	m.home_goal, 
  	m.away_goal,
       (m.home_goal + m.away_goal) AS total_goals
    FROM match AS m
    LEFT JOIN league as l ON m.country_id = l.id)
-- Select the league, date, home, and away goals from the CTE
SELECT league, date, home_goal, away_goal
FROM match_list
-- Filter by total goals
WHERE total_goals >= 10;

Another example:

-- Set up your CTE
WITH match_list AS (
    SELECT 
  	country_id,
  	(home_goal + away_goal) AS goals
    FROM match
  	-- Create a list of match IDs to filter data in the CTE
    WHERE id IN (
       SELECT id
       FROM match
       WHERE season = '2013/2014' AND EXTRACT(MONTH FROM date) = 8))
-- Select the league name and average of goals in the CTE
SELECT 
	l.name,
    AVG(goals)
FROM league AS l
-- Join the CTE onto the league table
LEFT JOIN match_list ON l.id = match_list.country_id
GROUP BY l.name;


Summary:
-- Joins: Combine 2+ tables, simple operations and aggregations
-- Correlated subqueries: Match subqueries & tables, avoid limits of join, high processing time
-- Multiple/nested queries: multi-step transformation, improve accuracy and reproducibility
-- CTEs: organize subqueries sequentially, can reference other CTEs


Joins:
What is the total sales per employee? 2+ tables

Correlated subqueries
Who does each employee report to in a company?

Multiple/nested subqueries
What is the average deal size closed by each sales representative in the quarter?

CTEs
How did the marketing, sales, growth, & engineering teams perform on key metrics?

Exercise:
How do you get both the home and away team names into one final query result?

Method 1: Subqueries
SELECT
    m.date,
    home.hometeam,
    away.awayteam,
    m.home_goal,
    m.away_goal
FROM match AS m

-- Join the home subquery to the match table
LEFT JOIN (
  SELECT match.id, team.team_long_name AS hometeam
  FROM match
  LEFT JOIN team
  ON match.hometeam_id = team.team_api_id) AS home
ON home.id = m.id

-- Join the away subquery to the match table
LEFT JOIN (
  SELECT match.id, team.team_long_name AS awayteam
  FROM match
  LEFT JOIN team
  -- Get the away team ID in the subquery
  ON match.awayteam_id = team.team_api_id) AS away
ON away.id = m.id;

Method 2: Correlated subquery

SELECT
    m.date,
    	(SELECT team_long_name
    	 FROM team AS t
    	 WHERE t.team_api_id = m.hometeam_id) AS hometeam,
    -- Connect the team to the match table
   	 (SELECT team_long_name
   	  FROM team AS t
    	 WHERE t.team_api_id = m.awayteam_id) AS awayteam,
    -- Select home and away goals
     home_goal,
     away_goal
FROM match AS m;

Method 3: CTEs
WITH home AS (
  SELECT m.id, m.date, 
  	t.team_long_name AS hometeam, m.home_goal
  FROM match AS m
  LEFT JOIN team AS t 
 	 ON m.hometeam_id = t.team_api_id),
-- Declare and set up the away CTE
away AS (
  SELECT m.id, m.date, 
  	 t.team_long_name AS awayteam, m.away_goal
  FROM match AS m
  LEFT JOIN team AS t 
  	ON m.awayteam_id = t.team_api_id)
-- Select date, home_goal, and away_goal
SELECT 
    home.date,
    home.hometeam,
    away.awayteam,
    home.home_goal,
    away.away_goal
-- Join away and home on the id column
FROM home
INNER JOIN away
	ON home.id = away.id;

__________________________________________________________________________________________________

-- Window functions
-- Work around limitation that you cant compare aggregate values to non-aggregate data
-- Perform calculations on an already generated result set (a window)
-- Aggregate calculations: similar to subqueries in SELECT, running totals, rankings, moving averages
-- Processed after every part of query except ORDER BY
-- Uses information in result set rather than database
-- Available in PostgreSQL, Oracle, MySQL, SQL Server.. not in SQLite


How many goals were scored in each match in 2011/2012, and how did that compare to the average?

SELECT
	date,
	(home_goal +  away_goal) AS goals,
	AVG(home_goal + away_goal) OVER() AS overall_avg
FROM match
WHERE season = '2011/2012';

-- OVER() passes aggregate over result set
-- The OVER() clause allows you to pass an aggregate function down a data set

What is the rank of matches based on number of goals scored?
SELECT
	date,
	(home_goal +  away_goal) AS goals,
	RANK() OVER(ORDER BY home_goal + away_goal DESC) AS goals_rank
FROM match
WHERE season = '2011/2012';

-- RANK () default order is from smallest to largest
-- By adding DESC in Window function you sort results from largest to smallest
-- window function will apply the filter that you include in your WHERE clause.

SELECT 
    id,
    RANK() OVER(ORDER BY home_goal) AS rank
FROM match;

Example:
SELECT 
	-- Select the league name and average goals scored
	l.name AS league,
    AVG(m.home_goal + m.away_goal) AS avg_goals,
    -- Rank leagues in descending order by average goals
    RANK() OVER(ORDER BY AVG(m.home_goal + m.away_goal) DESC) AS league_rank
FROM league AS l
LEFT JOIN match AS m 
ON l.id = m.country_id
WHERE m.season = '2011/2012'
GROUP BY l.name
-- Order the query by the rank you created
ORDER BY league_rank;

-- PARTITION BY
-- Calculate separate values for different categories
-- Calculate different calculations in the same column
-- Calculate values broken out by multiple columns
-- Can partition data by 1 or more columns
-- Can partition aggregate calculations, ranks, etc..

AVG(home_goal) OVER(PARTITION BY season)

How many goals were scored in each match, and how did that compare to the season's average?

SELECT 
	date, 
	(home_goal, away_goal) AS goals,
	AVG(home_goal + away_goal) OVER(PARTITION BY season) AS season_avg
FROM match;

Partition by a column:
SELECT
	date,
	season,
	home_goal,
	away_goal,
	CASE WHEN hometeam_id = 8673 THEN 'home' 
		 ELSE 'away' END AS warsaw_location,
    -- Calculate the average goals scored partitioned by season
    AVG(home_goal+away_goal) OVER(partition by season) AS season_homeavg,
    AVG(home_goal+away_goal) OVER(partition by season) AS season_awayavg
FROM match
-- Filter the data set for Legia Warszawa matches only
WHERE 
	hometeam_id = 8673 
    OR awayteam_id = 8673
ORDER BY (home_goal + away_goal) DESC;


SELECT 
	c.name,
	m.season,
	(home_goal, away_goal) AS goals,
	AVG(home_goal + away_goal) OVER(PARTITION BY m.season,c.name) AS season_ctry_avg
FROM country AS c
LEFT JOIN match AS m
ON c.id = m.country_id

